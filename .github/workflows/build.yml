name: Build Truth AI APK

on:
  push:
    branches: [main, master, development]
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      build-type:
        description: 'Type de build'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - debug

env:
  FLUTTER_VERSION: '3.22.0'
  JAVA_VERSION: '17'

jobs:
  build-android:
    name: Build Android APK
    runs-on: ubuntu-latest
    
    steps:
    # -----------------------------------------------------
    # 1️⃣  Récupération du code
    # -----------------------------------------------------
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # -----------------------------------------------------
    # 2️⃣  Détection du projet Flutter
    # -----------------------------------------------------
    - name: 🔍 Detect Flutter Project
      id: detect-project
      run: |
        echo "🔎 Scanning for Flutter project..."
        if [ -f "pubspec.yaml" ]; then
          echo "📁 Project found at root"
          echo "project_dir=." >> $GITHUB_OUTPUT
        elif [ -f "truthsound_app/pubspec.yaml" ]; then
          echo "📁 Project found in truthsound_app"
          echo "project_dir=truthsound_app" >> $GITHUB_OUTPUT
        else
          PROJECT_DIR=$(find . -name 'pubspec.yaml' -type f -maxdepth 3 | head -1 | xargs dirname 2>/dev/null || echo ".")
          echo "📁 Auto-detected project: $PROJECT_DIR"
          echo "project_dir=$PROJECT_DIR" >> $GITHUB_OUTPUT
        fi
        
        echo "📋 Project structure:"
        find . -name 'pubspec.yaml' -type f | head -5

    - name: 📊 Debug Info
      run: |
        echo "🏗️ Build Type: ${{ github.event.inputs.build-type || 'release' }}"
        echo "📁 Project Directory: ${{ steps.detect-project.outputs.project_dir }}"
        echo "🐦 Flutter Version: ${{ env.FLUTTER_VERSION }}"
        echo "☕ Java Version: ${{ env.JAVA_VERSION }}"
        echo ""
        echo "📦 Project Content:"
        ls -la ${{ steps.detect-project.outputs.project_dir }}

    # -----------------------------------------------------
    # 3️⃣  Configuration des environnements
    # -----------------------------------------------------
    - name: ⚙️ Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: 🤖 Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        api-level: 33
        build-tools-version: "33.0.2"
        ndk-version: "25.1.8937393"
        cmake-version: "3.22.1"

    - name: 🐦 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}

    # -----------------------------------------------------
    # 4️⃣  Gestion du cache & dépendances
    # -----------------------------------------------------
    - name: ♻️ Cache Pub Dependencies
      uses: actions/cache@v4
      with:
        path: ~/.pub-cache
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: ${{ runner.os }}-pub-

    - name: 🧹 Clean & Install Dependencies
      run: |
        flutter clean
        flutter pub get --verbose
      working-directory: ${{ steps.detect-project.outputs.project_dir }}

    # -----------------------------------------------------
    # 5️⃣  Analyse et tests
    # -----------------------------------------------------
    - name: 🩺 Flutter Doctor
      run: flutter doctor -v

    - name: 🔍 Analyze Code
      run: flutter analyze
      working-directory: ${{ steps.detect-project.outputs.project_dir }}

    - name: 🧪 Run Tests
      run: flutter test || echo "⚠️ No tests found"
      working-directory: ${{ steps.detect-project.outputs.project_dir }}

    # -----------------------------------------------------
    # 6️⃣  (Optionnel) Signature du build release
    # -----------------------------------------------------
    - name: 🔏 Setup Keystore
      if: ${{ github.event.inputs.build-type == 'release' }}
      run: |
        echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > android/app/release.keystore
        echo "storeFile=release.keystore" >> android/key.properties
        echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
        echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
        echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
      working-directory: ${{ steps.detect-project.outputs.project_dir }}

    # -----------------------------------------------------
    # 7️⃣  Build APK
    # -----------------------------------------------------
    - name: 🏗️ Build APK
      id: build-apk
      run: |
        if [ "${{ github.event.inputs.build-type || 'release' }}" = "debug" ]; then
          echo "🔨 Building Debug APK..."
          flutter build apk --debug --verbose
          echo "apk_path=${{ steps.detect-project.outputs.project_dir }}/build/app/outputs/flutter-apk/app-debug.apk" >> $GITHUB_OUTPUT
          echo "build_type=debug" >> $GITHUB_OUTPUT
        else
          echo "🔨 Building Release APK..."
          flutter build apk --release --split-per-abi --verbose
          echo "apk_path=${{ steps.detect-project.outputs.project_dir }}/build/app/outputs/flutter-apk/app-release.apk" >> $GITHUB_OUTPUT
          echo "build_type=release" >> $GITHUB_OUTPUT
        fi
      working-directory: ${{ steps.detect-project.outputs.project_dir }}

    - name: 📋 List Build Outputs
      run: |
        echo "📁 Build outputs:"
        find ${{ steps.detect-project.outputs.project_dir }}/build -name "*.apk" -type f | head -10
        echo ""
        echo "📊 APK Info:"
        ls -lh ${{ steps.build-apk.outputs.apk_path }}

    # -----------------------------------------------------
    # 8️⃣  Upload APK
    # -----------------------------------------------------
    - name: 📤 Upload APK Artifact
      uses: actions/upload-artifact@v4
      with:
        name: truth-ai-${{ steps.build-apk.outputs.build_type }}-apk
        path: ${{ steps.build-apk.outputs.apk_path }}
        retention-days: 30
        if-no-files-found: warn

    # -----------------------------------------------------
    # 9️⃣  Résumé du build
    # -----------------------------------------------------
    - name: 📝 Build Summary
      if: always()
      run: |
        echo "## 🏗️ Build Result" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Item | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Status** | ${{ job.status }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Build Type** | ${{ steps.build-apk.outputs.build_type }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Project Dir** | ${{ steps.detect-project.outputs.project_dir }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Flutter Version** | ${{ env.FLUTTER_VERSION }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ job.status }}" = "success" ]; then
          echo "### ✅ Build Successful!" >> $GITHUB_STEP_SUMMARY
          echo "APK generated: \`${{ steps.build-apk.outputs.apk_path }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Download the APK from the Artifacts section." >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
          echo "Check the logs for details." >> $GITHUB_STEP_SUMMARY
        fi

  # -----------------------------------------------------
  # 🔒 Job 2 : Security Scan
  # -----------------------------------------------------
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-android
    
    steps:
    - name: 📥 Download APK
      uses: actions/download-artifact@v4
      with:
        name: truth-ai-release-apk
        path: ./apks

    - name: 🔒 Basic Security Check
      run: |
        echo "🔍 Basic APK Security Check"
        if [ -f "./apks/app-release.apk" ]; then
          echo "📱 APK File Info:"
          file ./apks/app-release.apk
          echo ""
          echo "📊 APK Size:"
          ls -lh ./apks/app-release.apk
        else
          echo "❌ APK not found for security scan"
        fi

  # -----------------------------------------------------
  # 📢 Job 3 : Notification finale
  # -----------------------------------------------------
  notify:
    name: Notify Status
    runs-on: ubuntu-latest
    needs: [build-android, security-scan]
    if: always()
    
    steps:
    - name: 📢 Build Status
      run: |
        echo "🏗️ Build completed with status: ${{ needs.build-android.result }}"
        echo "🔒 Security scan: ${{ needs.security-scan.result }}"
